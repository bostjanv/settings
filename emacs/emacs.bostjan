;; set the fonts and colors I like
(global-font-lock-mode t)
;;(set-default-font "-*-profont-medium-r-normal--12-*-72-72-c-60-iso8859-1")
;;(set-default-font "Liberation Mono-13:bold")
(set-default-font "Liberation Mono-12")
;;(set-default-font "Monaco-13")
(set-mouse-color "black")
;;(setq hl-line-mode t)
(global-hl-line-mode 1)
(scroll-bar-mode -1)

(load-library "view")
(require 'cc-mode)
(require 'ido)
(require 'compile)
(ido-mode t)

;; Abbrevation expansion
(abbrev-mode 1)

;; remove trailing whitespace
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;(define-key global-map "\t" 'dabbrev-expand)
;(define-key global-map [S-tab] 'indent-for-tab-command)
;(define-key global-map [backtab] 'indent-for-tab-command)
;(define-key global-map [C-tab] 'indent-region)
;(define-key global-map "	" 'indent-region)

(defun casey-never-split-a-window
    "Never, ever split a window.  Why would anyone EVER want you to do that??"
    nil)
(setq split-window-preferred-function 'casey-never-split-a-window)

; no screwing with my middle mouse button
(global-unset-key [mouse-2])

;;(set-face-background 'hl-line "#3e4446")
(set-face-background 'hl-line "midnight blue")

; Setup my find-files
;;(define-key global-map "\ef" 'find-file)
;;(define-key global-map "\eF" 'find-file-other-window)

;;(setq visible-bell t)             ;; Get rid of the beeps
(setq visible-bell nil)
(tool-bar-mode 0)                 ;; No toolbars
(menu-bar-mode 0)                 ;; No menus

; Turn off the bell on Mac OS X
(defun nil-bell ())
(setq ring-bell-function 'nil-bell)

; Smooth scroll
(setq scroll-step 3)

; Clock
(display-time)

; Startup windowing
(setq next-line-add-newlines nil)
(setq-default truncate-lines t)
(setq truncate-partial-width-windows nil)
(split-window-horizontally)

;; F1 - Help? Isnâ€™t Control-H good enough?
;; F2 - Standard alternate meta key with lots of bindings
;; F3 - Define a keyboard macro
;; F4 - Replay a keyboard macro
;; F5 - Repeat the last command â€¦
;; F6 - Repeat the last command entered at the M-x prompt
;; F7 - Switch to another window â€¦ Shift goes the other way.
;; F8 - Switch to buffer
;; F9 - My other meta key for changing colors and other odd bindings that I actually donâ€™t use that often


;; (global-set-key (kbd "<f5>") 'repeat)
;; (global-set-key (kbd "<f6>") 'repeat-complex-command)

(global-set-key (kbd "<f5>") 'recompile)

(global-set-key (kbd "<f7>") 'other-window)
(global-set-key (kbd "S-<f7>")
                '(lambda () "Previous Window" (interactive) (other-window -1)))
(global-set-key (kbd "<f8>") 'ibuffer)
(global-set-key (kbd "S-<f8>") 'switch-to-next-buffer)
(global-set-key (kbd "C-x C-b") 'ibuffer) ;; Use Ibuffer for Buffer List

(global-set-key (kbd "M-n") 'next-error)


;;(setq custom-file "~/.emacs-custom.el")
;;(load custom-file)


;;(global-set-key (kbd "\t") 'dabbrev-expand)
;;(define-key global-map "\t" 'dabbrev-expand)

(set-face-attribute 'default t :font "Liberation Mono-12")
(set-face-attribute 'font-lock-builtin-face nil :foreground "#DAB98F")
(set-face-attribute 'font-lock-comment-face nil :foreground "gray50")
(set-face-attribute 'font-lock-constant-face nil :foreground "olive drab")
(set-face-attribute 'font-lock-doc-face nil :foreground "gray50")
(set-face-attribute 'font-lock-function-name-face nil :foreground "burlywood3")
(set-face-attribute 'font-lock-keyword-face nil :foreground "DarkGoldenrod3")
(set-face-attribute 'font-lock-string-face nil :foreground "olive drab")
(set-face-attribute 'font-lock-type-face nil :foreground "burlywood3")
(set-face-attribute 'font-lock-variable-name-face nil :foreground "burlywood3")


(defun post-load-stuff ()
  (interactive)
  (menu-bar-mode -1)
  ;;(maximize-frame)
  (set-foreground-color "burlywood3")
  (set-background-color "#161616")
  (set-cursor-color "#40FF40")
)
(add-hook 'window-setup-hook 'post-load-stuff t)

; Bright-red TODOs
 (setq fixme-modes '(c++-mode c-mode emacs-lisp-mode))
 (make-face 'font-lock-fixme-face)
 (make-face 'font-lock-note-face)
 (mapc (lambda (mode)
	 (font-lock-add-keywords
	  mode
	  '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
            ("\\<\\(NOTE\\)" 1 'font-lock-note-face t))))
	fixme-modes)
 (modify-face 'font-lock-fixme-face "Red" nil nil t nil t nil nil)
 (modify-face 'font-lock-note-face "Dark Green" nil nil t nil t nil nil)

; Setup my compilation mode
(defun bostjan-compilation-hook ()
  (make-local-variable 'truncate-lines)
  (setq truncate-lines nil)
)

(add-hook 'compilation-mode-hook 'bostjan-compilation-hook)


; style I want to use in c++ mode

;; By default files ending in .h are treated as c files rather than c++ files
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

(c-add-style "bostjan-c++-style"
	     '("bsd"
	       (indent-tabs-mode . nil)        ; use spaces rather than tabs
	       (c-basic-offset . 4)            ; indent by four spaces
	       (c-offsets-alist . ((inline-open . 0)  ; custom indentation rules
				   (brace-list-open . 0)
				   (statement-case-open . +)))))

(defun bostjan-c++-mode-hook ()
  (c-set-style "bostjan-c++-style")
  (auto-fill-mode)
  ;; (c-toggle-hungry-state 1)
  (c-toggle-auto-hungry-state 1))

(add-hook 'c++-mode-hook 'bostjan-c++-mode-hook)

;; You can customise C++ mode key bindings using entries like:
;; (define-key c++-mode-map "\C-ct" 'some-function-i-want-to-call)
